function state = AlignPlotSwarm(options,state,flag, ijk)
% Plots the positions of particle swarm.

persistent fig;
if(isempty(fig))
    figHandles = findall(0,'Type','figure');
    fig = figure(figHandles(1));
end
set(0,'CurrentFigure',fig)

subplot(2,3,3);
hold on;

if nargin < 4 && size(state.Population,2) > 1 % Go to defaults
    ijk = [1,2] ; % k doesn't exist
elseif size(state.Population,2) == 1 % For 1-D problems
    ijk = 1 ;
else % Robust input check
    ijk = reshape(ijk,1,[]) ;
end

% Input checking
if size(ijk,2) > 3
    warning('PSO:Plotting:tooManyDimensions',...
        'Unable to plot %g dimensions. Plotting first 3 only',...
        length(ijk))
end % if length

if strcmpi(flag(1:4),'init') % Initialize
    delete(findobj(gca,'-regexp','Tag','*Locations'))
    initLoc = line(state.Population(:,ijk(1)),state.Population(:,ijk(2)),...
        'Color',0.75*ones(1,3),...
        'Marker','.',...
        'LineStyle','none',...
        'Tag','Initial Locations') ;
    
    % Set reasonable axes limits
    % ---------------------------------------------------------------------
    xlim([options.PopInitRange(1,ijk(1)) options.PopInitRange(2,ijk(1))])
    if size(ijk,2) > 1
        ylim([options.PopInitRange(1,ijk(2)) ...
            options.PopInitRange(2,ijk(2))])
        if size(ijk,2) > 2
            zlim([options.PopInitRange(1,ijk(3)) ...
                options.PopInitRange(2,ijk(3))])
        end % if size
    end % if size
    % ---------------------------------------------------------------------
    
    title('Swarm positions')
    set(gca,'Tag','Swarm Plot','NextPlot','add')
    
    % Initialize plots
    % ---------------------------------------------------------------------
    if size(ijk,2) == 1 %  One dimensional
        currentLoc = line(state.Population(:,ijk(1)),...
            zeros(size(state.Population,1),1)) ;
    elseif size(ijk,2) == 2 % Two dimensional
        currentLoc = line(state.Population(:,ijk(1)),...
            state.Population(:,ijk(2))) ;
    elseif size(ijk,2) == 3 % Three dimensional
        currentLoc = line(state.Population(:,ijk(1)),...
            state.Population(:,ijk(2)),...
            state.Population(:,ijk(3))) ;
    end % if size
    set(currentLoc,...
            'LineStyle','none',...
            'Marker','.',...
            'Color','blue',...
            'Tag','Swarm Locations') ;
    % ---------------------------------------------------------------------
elseif strcmpi(flag(1:4),'iter') % Iterate
    currentLoc = findobj(gca,'Tag','Swarm Locations','Type','line') ;
    if size(ijk,2) == 1 %  One dimensional
        set(currentLoc,'XData',state.Population(:,ijk(1)))
    elseif size(ijk,2) == 2 % Two dimensional
        set(currentLoc,...
            'XData',state.Population(:,ijk(1)),...
            'YData',state.Population(:,ijk(2)))
    elseif size(ijk,2) == 3 % Three dimensional
        set(currentLoc,...
            'XData',state.Population(:,ijk(1)),...
            'YData',state.Population(:,ijk(2)),...
            'ZData',state.Population(:,ijk(3)))
    end
end

if strcmpi(flag(1:4),'init')
    legend([initLoc,currentLoc],{'Initial Positions','Current Positions'})
end

subplot(2,3,2);
hold on;

notinf = isfinite(state.Score') ;
% notinf = ~state.OutOfBounds ;
if isfield(state,'Penalty')
    particleHeights = state.Score(notinf)' ; %- state.Penalty(notinf)' ;
else
    particleHeights = state.Score(notinf)' ;
end

if strcmpi(flag(1:4),'init') % Initialize
    delete(findobj(gca,'-regexp','Tag','*Locations'))
    
    line(state.Population(notinf,1),state.Population(notinf,2),...
        particleHeights,...
        'Color',0.75*ones(1,3),...
        'Marker','.',...
        'LineStyle','none',...
        'Tag','Initial Locations') ;
    
    % Set reasonable axes limits
    % ---------------------------------------------------------------------
    xlim([options.PopInitRange(1,1) options.PopInitRange(2,1)])
    ylim([options.PopInitRange(1,2) options.PopInitRange(2,2)])
    view(3)
    % ---------------------------------------------------------------------
    
    if ~strcmpi(options.DemoMode,'off')
        set(state.hfigure,'Units','normalized',...
            'Position',[0.2, 0.3, 0.6, 0.5])
        overlaysurface(state.fitnessfcn,options) ;
    end % if ~isempty
    
    line(state.Population(notinf,1),...
        state.Population(notinf,2),...
        state.Score(notinf)',...
        'LineStyle','none',...
        'Marker','.',...
        'Color','blue',...
        'Tag','Swarm Locations') ;
    set(gca,'Tag','Swarm Plot 3D',...
        'NextPlot','add',...
        'Projection','perspective')
    rotate3d(gca,'on')
elseif strcmpi(flag(1:4),'iter') % Iterate
    set(findobj(gca,'Tag','Swarm Locations','Type','line'),...
        'XData',state.Population(notinf,1),...
        'YData',state.Population(notinf,2),...
        'ZData',particleHeights)
end

subplot(2,3,1);
hold on;

notinf = isfinite(state.Score) ;

if strcmp(flag,'init')
    set(gca,'NextPlot','add',...
        'XLabel',xlabel('Generation'),...
        'YLabel',ylabel('Score'))
%     line(state.Generation,max(state.Score),...
%         'Color','red',...
%         'Tag','Worst Scores',...
%         'Marker','.',...
%         'LineStyle','none')
    line(state.Generation,mean(state.Score(notinf)),...
        'Color','blue',...
        'Tag','Mean Scores',...
        'Marker','.',...
        'LineStyle','none')
    line(state.Generation,min(state.Score),...
        'Color','black',...
        'Tag','Best Scores',...
        'Marker','.',...
        'LineStyle','none')
elseif strcmp(flag,'done')
    legend({'Mean Score','Best Score'})
else
%     hworst = findobj(gca,'Tag','Worst Scores','Type','line') ;
    hmean = findobj(gca,'Tag','Mean Scores','Type','line') ;
    hbest = findobj(gca,'Tag','Best Scores','Type','line') ;
    x = [get(hmean,'XData'), state.Generation] ;
%     yworst = [get(hworst,'YData'), max(state.Score)] ;
    ymean = [get(hmean,'YData'), mean(state.Score(notinf))] ;
    ybest = [get(hbest,'YData'), min(state.Score)] ;
%     set(hworst,...
%         'XData',x,...
%         'YData',yworst)
    set(hmean,...
        'XData',x,...
        'YData',ymean)
    set(hbest,...
        'XData',x,...
        'YData',ybest)
    titletxt = sprintf('Best: %g Mean: %g',ybest(end),ymean(end)) ;
    title(titletxt)
end